"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adjust = function (prev, size, nodes) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h;
    var newNodes = new Map();
    var correlations = new Map();
    try {
        for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
            var node = nodes_1_1.value;
            if (!prev.has(node.id)) {
                var left = [];
                try {
                    for (var _j = __values(node.inputs), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var input = _k.value;
                        try {
                            for (var _l = __values(input.connection || []), _m = _l.next(); !_m.done; _m = _l.next()) {
                                var conn = _m.value;
                                left.push(conn.nodeId);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var right = [];
                try {
                    for (var _o = __values(node.outputs), _p = _o.next(); !_p.done; _p = _o.next()) {
                        var output = _p.value;
                        try {
                            for (var _q = __values(output.connection || []), _r = _q.next(); !_r.done; _r = _q.next()) {
                                var conn = _r.value;
                                right.push(conn.nodeId);
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                correlations.set(node.id, { left: left, right: right });
                newNodes.set(node.id, {
                    isCollapsed: (node.initial !== undefined &&
                        node.initial.isCollapsed !== undefined) ?
                        node.initial.isCollapsed :
                        true,
                    pos: node.position || { x: 0, y: 0 },
                    size: { x: 100, y: 100 }
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (newNodes.size === 0)
        return newNodes;
    var idToColumn = new Map();
    var columnToId = new Map();
    var initialColumn = 0;
    var nodesKey = newNodes.keys();
    while (idToColumn.size < newNodes.size) {
        var queue = [];
        var nextNode = nodesKey.next().value;
        if (idToColumn.has(nextNode))
            continue;
        queue.push({ column: initialColumn, id: nextNode });
        while (queue.length > 0) {
            var item = queue.shift();
            idToColumn.set(item.id, item.column);
            if (columnToId.has(item.column))
                columnToId.get(item.column).push(item.id);
            else
                columnToId.set(item.column, [item.id]);
            var cor = correlations.get(item.id);
            try {
                for (var _s = __values(cor.left), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var l = _t.value;
                    if (idToColumn.has(l))
                        continue;
                    queue.push({ column: item.column + 1, id: l });
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_f = _s.return)) _f.call(_s);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _u = __values(cor.right), _v = _u.next(); !_v.done; _v = _u.next()) {
                    var r = _v.value;
                    if (idToColumn.has(r))
                        continue;
                    queue.push({ column: item.column - 1, id: r });
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_v && !_v.done && (_g = _u.return)) _g.call(_u);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    }
    var width = size.width;
    var height = size.height;
    var dx = width / columnToId.size;
    var x = -dx / 2;
    try {
        for (var _w = __values(new Map(__spread(columnToId.entries()).sort())), _x = _w.next(); !_x.done; _x = _w.next()) {
            var _y = __read(_x.value, 2), columnNodes = _y[1];
            x += dx;
            for (var is in columnNodes) {
                var i = parseInt(is);
                var nodeId = columnNodes[i];
                var y = height * (1 + 2 * i) / (columnNodes.length * 2);
                newNodes.get(nodeId).pos = { x: x, y: y };
            }
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_x && !_x.done && (_h = _w.return)) _h.call(_w);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return newNodes;
};
//# sourceMappingURL=adjust.js.map